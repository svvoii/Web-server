#
## This is the example configuration file written in the NGINX config syntax.
## NGINX is a popular web server software that uses configuratuion files to
## define server settings, virtual hosts, and other server-related parameters.
##
## `Server` is a block that defines the server configuration.
##
## This example covers the following parameters:
## `listen` directive defines the port on which the server will listen for
## incoming connections.
##
## `server_name` directive defines the server or domain name for which the
## server configuration applies.
##
## `error_page` directive defines the default error page for the server.
##
## `client_max_body_size` directive defines the maximum size of the client
## request body.
##
## `location` block define different URL locations and their configurations.
## the `/` location block specifies the root directory for the file search,
## sets the default file to answer if the request is a directory (index.html),
## and turns on directory listing.
##
## The `/kapouet` location block defines a HTTP redirection to a new URL.
##
## The `/cgi-bin` location block defines the directory for CGI scripts and
## executes PHP CGI scripts (fastcgi_pass).
##
## The `/upload` location block defines the directory to save uploaded files,
## configures where uploaded files should be saved, and sets the buffer size
## for uploaded files.
##
## The `/` location block defines a proxy pass to the backend server, allowing
## it to work with POST and GET methods, and sets the headers for the proxy.
##
##
#

server {
	listen 80;  # Choose the port
	server_name example.com;  # Setup the server_names

	error_page 404 /404.html;  # Setup default error pages

	client_max_body_size 10M;  # Limit client body size

	location / {
		root /var/www/html;  # Define the root directory for file search
		index index.html;  # Set a default file to answer if the request is a directory
		autoindex on;  # Turn on directory listing
	}

	location /kapouet {
		return 301 http://example.com/new-url;  # Define a HTTP redirection
	}

	location /cgi-bin {
		alias /var/www/cgi-bin;  # Define the directory for CGI scripts
		include fastcgi_params;
		fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;  # Execute PHP CGI
	}

	location /upload {
		alias /var/www/uploads;  # Define the directory to save uploaded files
		include fastcgi_params;
		fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;  # Execute PHP CGI
		client_body_temp_path /var/www/uploads/temp;  # Configure where uploaded files should be saved
		client_body_in_file_only on;  # Save uploaded files to disk
		client_body_buffer_size 128K;  # Buffer size for uploaded files
	}

	location / {
		proxy_pass http://backend;  # Make it work with POST and GET methods
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
	}
}

## The root directive in the server block is not a must, but it's often used 
## for convenience. It sets the root directory for requests to the server, 
## which can be overridden by root directives in location blocks.
#
## EXAMPLE OF NESTED LOCATION BLOCKS

server {
    listen 80;
    server_name example.com;
    root /var/www/html;

    location / {
        // This block will use /var/www/html as the root
    }

    location /images/ {
        root /var/www/img;
        location /images/thumbnails/ {
            // This block will use /var/www/img/images/thumbnails as the root
        }
    }
}

## In this example, the first location block does not have a root directive, 
## so it uses the root directive from the server block (/var/www/html). 
## The second location block has its own root directive (/var/www/img), 
## and the nested location block inherits this root directive and appends 
## its own location to it, resulting in /var/www/img/images/thumbnails.
##
## The root directive specifies the filesystem path to the resources 
## that should be served when a request matches the specified location. 
## If a location block does not have a root directive, it will inherit the root 
## directive from the nearest outer block.
#
## If the server block itself does not have a root directive, it means that 
## the server does not have a default root directory for serving files. 
## In this case, each location block within the server must provide its own root 
## directive to specify where the files for that location should be served from.
##
## When a location block does not contain a root directive, it inherits the 
## root directive from the nearest outer block. 
## This applies to nested location blocks as well.
##
## If a location block does not provide a root directive, NGINX will return a 
## 500 Internal Server Error because it doesn't know where to look for files..
##
## Good approach is to always save the root in the (locations data structure), 
## whether it's explicitly given in the location block or inherited from 
## an outer block. This way, there will always be the correct root for each 
## location, and it wont be necessary to keep track inherited or not localions.
## 
#

## ANOTHER EXAMPLE OF LOCATION BLOCKS WITHIN NGINX CONFIGURATION FILE

http {
	include mime.types;

	server {
		listen 8080;
		root /Users/username/Desktop/website;

		location ~* /count/[0-9] {
			root /Users/username/Desktop/website;
			try_files /index.html =404;
		}

		location /fruits {
			root /Users/username/Desktop/website;
		}

		location /carbs {
			alias /Users/username/Desktop/website/fruits;
		}

		location /vegetables {
			root /Users/username/Desktop/website;
			try_files /vegetables/veggies.html index.html =404;
		} 
	}
}

## SOURCE: https://www.youtube.com/watch?v=7VAI73roXaY
## The NGINX Crash Course
## ..this is a great video for learning the basics of NGINX configuration.
#

##
## The following example of the configuration file is based on the 
## requirements given in the subject description of the webserv project.

server {
    listen 8080 default_server;
	   

    server_name _; # this directive name is `catch-all`, meaning it will match any hostname that is not matched by any other server block.

    root /var/www/default;

    error_page 404 /404.html;

    client_max_body_size 10M;

    location / {
        try_files $uri $uri/ =404;
        autoindex on;
        index index.html;
    }

    location /upload/ {
        client_body_temp_path /var/tmp;
    }

    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_script_name;
    }
}

server {
    listen 8800;
    server_name example.com;
    root /var/www/example;
    error_page 404 /404.html;
    client_max_body_size 10M;

    location / {
        try_files $uri $uri/ =404;
        autoindex on;
        index index.html;
    }

    location /kapouet/ {
        alias /tmp/www/;
        autoindex off;
    }

    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_script_name;
    }
}
