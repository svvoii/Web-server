/*
** This is where the request from the web-browser is parsed.
** `HttpRequest` class receives the request as a string 
** at the time of construction of the object.
** It handles the parsing and stores the
** individual parts of the request in class members.
**
** The `HttpRequest` object is created on the heap in the
** `_handle()` method of the `HttpServer` class.
** And it is deleted in the `_respond()` method of the `HttpServer` class.
** This is done to avoid memory leaks when the server was interrupted (ctrl-c).
**
** After the request is parsed, the `HttpResponse` class
** is creaded and the `HttpRequest` object is passed to its
** constructor. The responce is generated by the `HttpResponse`. 
*/

#ifndef HTTPREQUEST_HPP
#define HTTPREQUEST_HPP

#include "../../Sockets/HeaderSockets.hpp"

#include <sstream>
#include <string>
#include <map>

class HttpServer;

enum requestMethod {
	NONE,
	GET,
	POST,
	PUT,
	DELETE
};

class HttpRequest {
	private:

		enum requestMethod	_method; // To store the type of the request from the browser, GET, POST etc.
		std::string			_uriPath; // To store the requested path from the browser
		std::string			_httpVersion;
		std::string			_bodyBuffer;
		std::map<std::string, std::string>	_headers;
		std::map<std::string, std::string>	_body;

		void parseHeaders(const std::string& line); // To parse the headers of the HTTP request
		void extractRequestLine(); // To extract the first line of the HTTP request
		void parseBody(); // To parse the body of the HTTP request

	public:

		HttpRequest(const std::string& requestBuffer);
		~HttpRequest();

		// Getters
		std::string			getMethod();
		std::string 		getUri();
		std::string 		getHttpVersion();
		std::string			getBodyBuffer();
		std::map<std::string, std::string> getHeaders();
		std::map<std::string, std::string> getBody();

		// Clean parsing helpers
		std::string			trim(const std::string& str);
		enum requestMethod	isMethod(const std::string& str);

		// Body parsing helpers
		void				parseFormUrlData(const std::string& data);
		void				parseJsonData(const std::string& data);
		void				parseXmlData(const std::string& data);

};

#endif
